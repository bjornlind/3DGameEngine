#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 vertexNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float toLightDistance;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	
	pass_textureCoords = textureCoords; 
	vertexNormal = normalize( (transformationMatrix * vec4(normal, 0.0)).xyz );
	toLightDistance = distance(lightPosition, worldPosition.xyz);
	toLightVector = normalize( lightPosition - worldPosition.xyz );
	toCameraVector = normalize( (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz );

}